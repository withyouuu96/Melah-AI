# core/language_stylizer.py

import logging
from typing import Dict, List, Optional
import re

# ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° import pythainlp ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡πÉ‡∏ä‡πâ logic ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
try:
    from pythainlp.tokenize import word_tokenize
    PYTHAINLP_AVAILABLE = True
except ImportError:
    PYTHAINLP_AVAILABLE = False
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô logger.warning ‡πÅ‡∏ó‡∏ô print ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ log ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    logging.warning("pythainlp not found. LanguageStylizer will use basic string operations.")

logger = logging.getLogger(__name__)

class LanguageStylizer:
    """
    ‡∏£‡∏±‡∏ö '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢' ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Sterilized Thought) ‡∏à‡∏≤‡∏Å Reflector
    ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏° Persona ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    """
    def __init__(self, persona_config: Dict):
        """
        Args:
            persona_config (Dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á AI ‡∏à‡∏≤‡∏Å identity.json
        """
        self.persona = persona_config
        logger.info(f"üé® LanguageStylizer initialized for persona: {self.persona.get('name', 'Unknown')}")

    def style_response(self, final_thought: str, relationship_level: str) -> str:
        """
        ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î)

        Args:
            final_thought: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≤‡∏Å Reflector
            relationship_level: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ("formal", "friendly", "intimate")

        Returns:
            str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        """
        logger.info(f"Stylizer: Styling neutral thought: '{final_thought[:100]}...' for level: {relationship_level}")
        
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Persona ---
        gender = self.persona.get("gender", "female")
        ai_name = self.persona.get('name', 'AI')
        
        # --- 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏£‡∏£‡∏û‡∏ô‡∏≤‡∏° (Pronouns) ---
        pronoun_i_map = self.persona.get("pronoun_i", {"formal": ai_name, "friendly": "‡∏â‡∏±‡∏ô"})
        pronoun_you_map = self.persona.get("pronoun_you", {"formal": "‡∏Ñ‡∏∏‡∏ì", "friendly": "‡∏Ñ‡∏∏‡∏ì"})

        pronoun_i = pronoun_i_map.get(relationship_level, pronoun_i_map.get("friendly", "‡∏â‡∏±‡∏ô"))
        pronoun_you = pronoun_you_map.get(relationship_level, pronoun_you_map.get("friendly", "‡∏Ñ‡∏∏‡∏ì"))

        # --- 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ (Particles) ---
        particle_statement = "‡∏Ñ‡πà‡∏∞" if gender == "female" else "‡∏Ñ‡∏£‡∏±‡∏ö"
        particle_question = "‡∏Ñ‡∏∞" if gender == "female" else "‡∏Ñ‡∏£‡∏±‡∏ö"

        # --- 4. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á (Styling) ---
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà placeholder ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        styled_text = final_thought.replace("{{pronoun_i}}", pronoun_i)
        styled_text = styled_text.replace("{{pronoun_you}}", pronoun_you)
        styled_text = styled_text.replace("{{particle_statement}}", particle_statement)
        styled_text = styled_text.replace("{{particle_question}}", particle_question)
        
        # --- 5. Final Cleanup ---
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏´‡∏•‡∏∏‡∏î‡∏£‡∏≠‡∏î‡∏°‡∏≤
        styled_text = self._final_cleanup(styled_text)
        
        logger.info(f"Stylizer: Final styled text: '{styled_text[:100]}...'")
        return styled_text

    def _final_cleanup(self, text: str) -> str:
        """
        ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        """
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        cleaned_text = re.sub(r'\s*\([^)]*\)$', '', text.strip()).strip()

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "‡∏Ñ‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞"
        if "‡∏Ñ‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö" in cleaned_text:
            particle = "‡∏Ñ‡∏∞" if self.persona.get("gender", "female") == "female" else "‡∏Ñ‡∏£‡∏±‡∏ö"
            cleaned_text = cleaned_text.replace("‡∏Ñ‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö", particle)
        if "‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞" in cleaned_text:
            particle = "‡∏Ñ‡πà‡∏∞" if self.persona.get("gender", "female") == "female" else "‡∏Ñ‡∏£‡∏±‡∏ö"
            cleaned_text = cleaned_text.replace("‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", particle)
            
        # ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° cleanup ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        return cleaned_text

# --- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---
if __name__ == '__main__':
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    pass