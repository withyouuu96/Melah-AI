# core/mcts_engine.py

import logging
from typing import Dict, List, Optional, Tuple, Any
import numpy as np
import math

# ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ type hint ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î Circular Import
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .identity_core import IdentityCore
    from .vector_memory_index import VectorMemoryIndex
    from .memory_path_bridge import MemoryPathBridge
    from .reflector import Reflector # For reflection/learning
    # from .llm_connector import LLMConnector # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô IdentityCore


logger = logging.getLogger(__name__)

class MCTS_Engine:
    """
    ‡πÉ‡∏ä‡πâ Monte Carlo Tree Search (MCTS) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏•‡πÑ‡∏Å Reflective (R-MCTS)
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á "‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    """
    def __init__(self, identity_core_instance: 'IdentityCore',
                 vector_memory_index: 'VectorMemoryIndex',
                 memory_path_bridge: 'MemoryPathBridge',
                 config: Optional[Dict] = None):
        
        self.identity_core = identity_core_instance
        self.vector_memory_index = vector_memory_index
        self.memory_path_bridge = memory_path_bridge
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MCTS (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ)
        self.config = {
            "max_simulations": 50,          # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
            "max_depth": 5,                 # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á chain ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            "uct_c": 1.41,                  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UCT (Upper Confidence Bound 1 applied to Trees)
            "exploration_weight": 0.7,      # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à (exploration) ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå (exploitation)
            "llm_evaluation_threshold": 0.6 # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà LLM ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ LLM ‡πÉ‡∏ô simulation)
        }
        if config:
            self.config.update(config)

        self.root_node = None # ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á MCTS Tree

        logger.info("üå≥ MCTS_Engine initialized.")

    def search_memory_chain(self, query: str, exclude_session_ids: Optional[set] = None) -> Dict[str, Any]:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ R-MCTS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ chain ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        Args:
            query (str): ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            exclude_session_ids (Optional[set]): ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        
        Returns:
            Dict: {'context': str, 'session_id': str, 'score': float}
        """
        if not self.vector_memory_index.embeddings:
            logger.warning("VectorMemoryIndex not ready. Falling back to basic memory retrieval.")
            # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å IdentityCore.get_memory_context_for_query ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ó‡∏ô
            return self.identity_core.get_memory_context_for_query(query, exclude_session_ids=exclude_session_ids)

        logger.info(f"Starting MCTS search for query: '{query[:50]}...'")
        
        # Initialize the root node
        # Root node ‡πÅ‡∏ó‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤
        self.root_node = MCTSNode(
            session_id="ROOT",
            parent=None,
            depth=0,
            query=query,
            exclude_ids=exclude_session_ids or set()
        )
        
        best_context = ""
        best_session_id = None
        best_score = -1.0 # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á chain ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        for i in range(self.config["max_simulations"]):
            logger.debug(f"MCTS Simulation {i+1}/{self.config['max_simulations']}")
            
            # 1. Selection: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏≥‡∏£‡∏ß‡∏à (traverse tree)
            selected_node = self._select(self.root_node)
            
            # 2. Expansion: ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (add new child nodes)
            # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏¢‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á max_depth
            if not selected_node.is_terminal and selected_node.depth < self.config["max_depth"]:
                self._expand(selected_node)
            
            # 3. Simulation (Rollout): ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏õ‡∏à‡∏ô‡∏à‡∏ö (‡∏à‡∏≤‡∏Å selected_node)
            # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏à‡∏≤‡∏Å selected_node ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            rollout_score, rollout_context, rollout_session_id = self._simulate(selected_node)
            
            # 4. Backpropagation: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô Tree
            self._backpropagate(selected_node, rollout_score)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á simulation
            if rollout_score > best_score:
                best_score = rollout_score
                best_context = rollout_context
                best_session_id = rollout_session_id
                logger.debug(f"New best path found (score: {best_score:.4f}) ending at session: {best_session_id}")
        
        logger.info(f"MCTS search finished. Best score: {best_score:.4f}, Session: {best_session_id}")
        return {"context": best_context, "session_id": best_session_id, "score": best_score}

    def _select(self, node: 'MCTSNode') -> 'MCTSNode':
        """
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≠‡πÑ‡∏õ (‡πÉ‡∏ä‡πâ UCT)
        """
        while not node.is_terminal and node.children:
            best_child = None
            best_uct_value = -float('inf')

            for child in node.children:
                if child.visits == 0: # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à
                    return child
                
                # UCT formula: Q/N + C * sqrt(ln(N_parent) / N_child)
                # Q = total_value (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                # N = visits (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°)
                exploit_term = child.total_value / child.visits
                explore_term = self.config["uct_c"] * math.sqrt(math.log(node.visits) / child.visits)
                
                uct_value = exploit_term + explore_term
                
                if uct_value > best_uct_value:
                    best_uct_value = uct_value
                    best_child = child
            node = best_child
        return node

    def _expand(self, node: 'MCTSNode'):
        """
        ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÇ‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≤ session_id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á child nodes
        """
        # ‡πÉ‡∏ä‡πâ VectorMemoryIndex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö query ‡∏Ç‡∏≠‡∏á node
        # (‡∏´‡∏£‡∏∑‡∏≠ query ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á root node)
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á session ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö ancestor ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å exclude_ids
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î ROOT, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ query ‡∏´‡∏•‡∏±‡∏Å
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏±‡πâ‡∏ô
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (Semantic Chaining)
        
        current_context_for_search = node.query # ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ query ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô: ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏∂‡∏á content ‡∏Ç‡∏≠‡∏á node.session_id ‡∏°‡∏≤
        # ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ nlp_processor.summarize_text ‡∏´‡∏£‡∏∑‡∏≠ LLM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö expansion
        
        # ‡∏î‡∏∂‡∏á session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å exclude ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        exclude_ids_for_search = node.exclude_ids.union(node.get_path_session_ids())
        
        relevant_sessions = self.vector_memory_index.search(
            query=current_context_for_search,
            top_k=5, # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ top N sessions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            exclude_ids=list(exclude_ids_for_search)
        )
        
        if not relevant_sessions:
            node.is_terminal = True # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢
            return

        for result in relevant_sessions:
            session_id = result['session_id']
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á child node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ session ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            new_child = MCTSNode(
                session_id=session_id,
                parent=node,
                depth=node.depth + 1,
                query=self.root_node.query, # child node ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á query ‡∏´‡∏•‡∏±‡∏Å
                exclude_ids=exclude_ids_for_search # ‡∏™‡πà‡∏á exclude_ids ‡πÑ‡∏õ‡πÉ‡∏´‡πâ child node ‡∏î‡πâ‡∏ß‡∏¢
            )
            node.add_child(new_child)
            logger.debug(f"Expanded node {node.session_id} with child: {session_id}")

    def _simulate(self, node: 'MCTSNode') -> Tuple[float, str, str]:
        """
        ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM (‡∏ú‡πà‡∏≤‡∏ô IdentityCore)
        """
        current_session_id = node.session_id
        current_context = ""
        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á chain ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏µ‡πâ
        # ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏Ñ‡πà‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á current_session_id ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö context ‡∏à‡∏≤‡∏Å parent
        
        # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ "‡∏™‡∏£‡πâ‡∏≤‡∏á" chain ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
        # ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á content ‡∏à‡∏≤‡∏Å session_id ‡∏Ç‡∏≠‡∏á node ‡πÅ‡∏•‡∏∞ ancestor ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô
        
        # Get the path from root to current node
        path_session_ids = node.get_path_session_ids()
        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ session ‡πÉ‡∏ô path
        # Note: self.memory_path_bridge.get_sessions_content_from_meta ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏ß‡πà‡∏≤
        # ‡πÅ‡∏ï‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå memory_manager.py, ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ get_chain_context ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö summary_filename
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö memory_path_bridge ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á content ‡∏ï‡∏≤‡∏° session_id list ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏°‡∏µ method ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å list ‡∏Ç‡∏≠‡∏á session_ids ‡πÑ‡∏î‡πâ
        # ‡∏ñ‡πâ‡∏≤ MemoryPathBridge.get_sessions_content (‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö List[str] ‡∏Ç‡∏≠‡∏á full paths) ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ,
        # ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ full path ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ session_id
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏Ñ‡πà session_id ‡∏Ç‡∏≠‡∏á node
        # ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ self.memory_path_bridge.get_sessions_content_from_meta(session_id)
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á chain ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        
        simulated_chain_contents = []
        if current_session_id != "ROOT": # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô root node
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á session ‡∏ô‡∏µ‡πâ
            # Note: ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö MemoryManager ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö session_id ‡∏ï‡∏£‡∏á‡πÜ
            # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ memory_path_bridge.get_session_content(session_id) ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ get_sessions_content_from_meta ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á list ‡πÅ‡∏Ñ‡πà session_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            
            # ‡∏î‡∏∂‡∏á chain ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏ñ‡∏∂‡∏á node ‡∏ô‡∏µ‡πâ
            session_meta_chain = self.memory_path_bridge.get_session_chain(current_session_id, max_depth=node.depth + 1)
            raw_contents = self.memory_path_bridge.get_sessions_content_from_meta(session_meta_chain)
            
            if raw_contents:
                # ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ LLM ‡∏´‡∏£‡∏∑‡∏≠ NLPProcessor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ/‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
                combined_content = "\n---\n".join(raw_contents)
                if len(combined_content) > 1000: # ‡∏ñ‡πâ‡∏≤‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ
                    try:
                        # LLM Call (‡∏ú‡πà‡∏≤‡∏ô IdentityCore) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
                        llm_client = self.identity_core.llm
                        eval_prompt = f"Summarize the following conversation context briefly, focusing on key information related to the query '{node.query}':\n\n{combined_content}"
                        current_context = llm_client.generate(prompt=eval_prompt, context="")
                    except Exception as e:
                        logger.warning(f"LLM evaluation in MCTS simulation failed: {e}. Using raw combined content.")
                        current_context = combined_content
                else:
                    current_context = combined_content
            
        # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Rollout Score)
        # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà R-MCTS ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
        score = self._evaluate_context_quality(node.query, current_context)

        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÜ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        # ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
        if score is None: # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            score = 0.5 # Default neutral score

        return score, current_context, current_session_id

    def _evaluate_context_quality(self, query: str, context: str) -> float:
        """
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö query ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
        ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ LLM (‡∏ú‡πà‡∏≤‡∏ô IdentityCore) ‡∏´‡∏£‡∏∑‡∏≠ Vector Search ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        """
        if not context.strip():
            return 0.0 # ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 0

        # Option 1: ‡πÉ‡∏ä‡πâ LLM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        try:
            llm_client = self.identity_core.llm
            eval_prompt = f"""Given the user's query: "{query}" and the retrieved context: "{context}", how relevant and useful is this context for answering the query?
            Provide a relevance score from 0.0 (not relevant) to 1.0 (highly relevant and useful).
            Output ONLY the score as a float.
            """
            llm_response = llm_client.generate(prompt=eval_prompt, context="")
            score = float(llm_response.strip())
            # ‡πÉ‡∏ä‡πâ Reflector ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ (Contrastive Reflection)
            # ‡∏ñ‡πâ‡∏≤ score ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å‡πÜ, ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ reflector ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏î‡∏µ
            if score < 0.3:
                self.identity_core.reflector.llm_reflect(
                    raw_thought=f"Low relevance context for query: '{query}' from session: {node.session_id}",
                    conversation_context=[], # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á context ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                    long_term_memory=context,
                    used_session_id=node.session_id,
                    current_intention=self.identity_core.current_seed.get("intention", "Default: Be a helpful assistant.")
                )
            return score
        except Exception as e:
            logger.warning(f"LLM evaluation for context quality failed: {e}. Falling back to semantic similarity.")
            # Fallback to Option 2: ‡πÉ‡∏ä‡πâ Semantic Similarity (Vector Search)
            return self._semantic_similarity_score(query, context)

    def _semantic_similarity_score(self, query: str, context: str) -> float:
        """
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á query ‡πÅ‡∏•‡∏∞ context
        """
        if not self.vector_memory_index.model:
            return 0.0 # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°

        try:
            query_embedding = self.vector_memory_index.model.encode(query, convert_to_tensor=True)
            context_embedding = self.vector_memory_index.model.encode(context, convert_to_tensor=True)
            score = float(np.array(self.vector_memory_index.util.cos_sim(query_embedding, context_embedding))[0][0])
            return score
        except Exception as e:
            logger.error(f"Semantic similarity scoring failed: {e}")
            return 0.0

    def _backpropagate(self, node: 'MCTSNode', score: float):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á root
        """
        while node is not None:
            node.visits += 1
            node.total_value += score
            node = node.parent


class MCTSNode:
    """
    ‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏ô MCTS Tree ‡πÅ‡∏ó‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÜ (‡πÄ‡∏ä‡πà‡∏ô chain ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)
    """
    def __init__(self, session_id: str, parent: Optional['MCTSNode'], depth: int, query: str, exclude_ids: set):
        self.session_id = session_id
        self.parent = parent
        self.children: List['MCTSNode'] = []
        self.visits = 0 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°
        self.total_value = 0.0 # ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡∏ô‡∏µ‡πâ
        self.depth = depth
        self.is_terminal = False # ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
        self.query = query # ‡πÄ‡∏Å‡πá‡∏ö query ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        self.exclude_ids = exclude_ids # session IDs ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ

    def add_child(self, child_node: 'MCTSNode'):
        self.children.append(child_node)

    def get_path_session_ids(self) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏Ç‡∏≠‡∏á session_ids ‡∏à‡∏≤‡∏Å root ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        path = []
        current = self
        while current and current.session_id != "ROOT":
            path.insert(0, current.session_id)
            current = current.parent
        return path

    def __repr__(self):
        return f"MCTSNode(id={self.session_id}, visits={self.visits}, value={self.total_value:.2f}, depth={self.depth})"